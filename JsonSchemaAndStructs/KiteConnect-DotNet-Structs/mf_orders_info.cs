// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MfOrdersInfo;
//
//    var mfOrdersInfo = MfOrdersInfo.FromJson(jsonString);

namespace MfOrdersInfo
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MfOrdersInfo
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? Amount { get; set; }

        [JsonProperty("average_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? AveragePrice { get; set; }

        [JsonProperty("exchange_order_id")]
        public object ExchangeOrderId { get; set; }

        [JsonProperty("exchange_timestamp")]
        public object ExchangeTimestamp { get; set; }

        [JsonProperty("folio")]
        public object Folio { get; set; }

        [JsonProperty("fund", NullValueHandling = NullValueHandling.Ignore)]
        public string Fund { get; set; }

        [JsonProperty("last_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? LastPrice { get; set; }

        [JsonProperty("last_price_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastPriceDate { get; set; }

        [JsonProperty("order_id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? OrderId { get; set; }

        [JsonProperty("order_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OrderTimestamp { get; set; }

        [JsonProperty("placed_by", NullValueHandling = NullValueHandling.Ignore)]
        public string PlacedBy { get; set; }

        [JsonProperty("purchase_type", NullValueHandling = NullValueHandling.Ignore)]
        public string PurchaseType { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }

        [JsonProperty("settlement_id")]
        public object SettlementId { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("status_message", NullValueHandling = NullValueHandling.Ignore)]
        public string StatusMessage { get; set; }

        [JsonProperty("tag")]
        public object Tag { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }

        [JsonProperty("transaction_type", NullValueHandling = NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        [JsonProperty("variety", NullValueHandling = NullValueHandling.Ignore)]
        public string Variety { get; set; }
    }

    public partial class MfOrdersInfo
    {
        public static MfOrdersInfo FromJson(string json) => JsonConvert.DeserializeObject<MfOrdersInfo>(json, MfOrdersInfo.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MfOrdersInfo self) => JsonConvert.SerializeObject(self, MfOrdersInfo.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
