// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Quote;
//
//    var quote = Quote.FromJson(jsonString);

namespace Quote
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Quote
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, Datum> Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("average_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? AveragePrice { get; set; }

        [JsonProperty("buy_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? BuyQuantity { get; set; }

        [JsonProperty("depth", NullValueHandling = NullValueHandling.Ignore)]
        public Depth Depth { get; set; }

        [JsonProperty("instrument_token", NullValueHandling = NullValueHandling.Ignore)]
        public long? InstrumentToken { get; set; }

        [JsonProperty("last_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? LastPrice { get; set; }

        [JsonProperty("last_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? LastQuantity { get; set; }

        [JsonProperty("last_trade_time", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastTradeTime { get; set; }

        [JsonProperty("lower_circuit_limit", NullValueHandling = NullValueHandling.Ignore)]
        public double? LowerCircuitLimit { get; set; }

        [JsonProperty("net_change", NullValueHandling = NullValueHandling.Ignore)]
        public long? NetChange { get; set; }

        [JsonProperty("ohlc", NullValueHandling = NullValueHandling.Ignore)]
        public Ohlc Ohlc { get; set; }

        [JsonProperty("oi", NullValueHandling = NullValueHandling.Ignore)]
        public long? Oi { get; set; }

        [JsonProperty("oi_day_high", NullValueHandling = NullValueHandling.Ignore)]
        public long? OiDayHigh { get; set; }

        [JsonProperty("oi_day_low", NullValueHandling = NullValueHandling.Ignore)]
        public long? OiDayLow { get; set; }

        [JsonProperty("sell_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? SellQuantity { get; set; }

        [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Timestamp { get; set; }

        [JsonProperty("upper_circuit_limit", NullValueHandling = NullValueHandling.Ignore)]
        public double? UpperCircuitLimit { get; set; }

        [JsonProperty("volume", NullValueHandling = NullValueHandling.Ignore)]
        public long? Volume { get; set; }
    }

    public partial class Depth
    {
        [JsonProperty("buy", NullValueHandling = NullValueHandling.Ignore)]
        public Buy[] Buy { get; set; }

        [JsonProperty("sell", NullValueHandling = NullValueHandling.Ignore)]
        public Buy[] Sell { get; set; }
    }

    public partial class Buy
    {
        [JsonProperty("orders", NullValueHandling = NullValueHandling.Ignore)]
        public long? Orders { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }
    }

    public partial class Ohlc
    {
        [JsonProperty("close", NullValueHandling = NullValueHandling.Ignore)]
        public double? Close { get; set; }

        [JsonProperty("high", NullValueHandling = NullValueHandling.Ignore)]
        public double? High { get; set; }

        [JsonProperty("low", NullValueHandling = NullValueHandling.Ignore)]
        public double? Low { get; set; }

        [JsonProperty("open", NullValueHandling = NullValueHandling.Ignore)]
        public long? Open { get; set; }
    }

    public partial class Quote
    {
        public static Quote FromJson(string json) => JsonConvert.DeserializeObject<Quote>(json, Quote.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Quote self) => JsonConvert.SerializeObject(self, Quote.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
