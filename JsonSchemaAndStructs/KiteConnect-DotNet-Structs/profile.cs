// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Profile;
//
//    var profile = Profile.FromJson(jsonString);

namespace Profile
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Profile
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("avatar_url")]
        public object AvatarUrl { get; set; }

        [JsonProperty("broker", NullValueHandling = NullValueHandling.Ignore)]
        public string Broker { get; set; }

        [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("exchanges", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Exchanges { get; set; }

        [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
        public Meta Meta { get; set; }

        [JsonProperty("order_types", NullValueHandling = NullValueHandling.Ignore)]
        public string[] OrderTypes { get; set; }

        [JsonProperty("products", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Products { get; set; }

        [JsonProperty("user_id", NullValueHandling = NullValueHandling.Ignore)]
        public string UserId { get; set; }

        [JsonProperty("user_name", NullValueHandling = NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [JsonProperty("user_shortname", NullValueHandling = NullValueHandling.Ignore)]
        public string UserShortname { get; set; }

        [JsonProperty("user_type", NullValueHandling = NullValueHandling.Ignore)]
        public string UserType { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("demat_consent", NullValueHandling = NullValueHandling.Ignore)]
        public string DematConsent { get; set; }
    }

    public partial class Profile
    {
        public static Profile FromJson(string json) => JsonConvert.DeserializeObject<Profile>(json, Profile.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Profile self) => JsonConvert.SerializeObject(self, Profile.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
