// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BasketMargins;
//
//    var basketMargins = BasketMargins.FromJson(jsonString);

namespace BasketMargins
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BasketMargins
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("final", NullValueHandling = NullValueHandling.Ignore)]
        public Final Final { get; set; }

        [JsonProperty("initial", NullValueHandling = NullValueHandling.Ignore)]
        public Final Initial { get; set; }

        [JsonProperty("orders", NullValueHandling = NullValueHandling.Ignore)]
        public Final[] Orders { get; set; }
    }

    public partial class Final
    {
        [JsonProperty("additional", NullValueHandling = NullValueHandling.Ignore)]
        public long? Additional { get; set; }

        [JsonProperty("bo", NullValueHandling = NullValueHandling.Ignore)]
        public long? Bo { get; set; }

        [JsonProperty("cash", NullValueHandling = NullValueHandling.Ignore)]
        public long? Cash { get; set; }

        [JsonProperty("exchange", NullValueHandling = NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        [JsonProperty("exposure", NullValueHandling = NullValueHandling.Ignore)]
        public double? Exposure { get; set; }

        [JsonProperty("option_premium", NullValueHandling = NullValueHandling.Ignore)]
        public double? OptionPremium { get; set; }

        [JsonProperty("pnl", NullValueHandling = NullValueHandling.Ignore)]
        public Pnl Pnl { get; set; }

        [JsonProperty("span", NullValueHandling = NullValueHandling.Ignore)]
        public double? Span { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public double? Total { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("var", NullValueHandling = NullValueHandling.Ignore)]
        public long? Var { get; set; }
    }

    public partial class Pnl
    {
        [JsonProperty("realised", NullValueHandling = NullValueHandling.Ignore)]
        public long? Realised { get; set; }

        [JsonProperty("unrealised", NullValueHandling = NullValueHandling.Ignore)]
        public long? Unrealised { get; set; }
    }

    public partial class BasketMargins
    {
        public static BasketMargins FromJson(string json) => JsonConvert.DeserializeObject<BasketMargins>(json, BasketMargins.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BasketMargins self) => JsonConvert.SerializeObject(self, BasketMargins.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
