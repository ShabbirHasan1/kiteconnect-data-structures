// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Positions;
//
//    var positions = Positions.FromJson(jsonString);

namespace Positions
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Positions
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("day", NullValueHandling = NullValueHandling.Ignore)]
        public Day[] Day { get; set; }

        [JsonProperty("net", NullValueHandling = NullValueHandling.Ignore)]
        public Day[] Net { get; set; }
    }

    public partial class Day
    {
        [JsonProperty("average_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? AveragePrice { get; set; }

        [JsonProperty("buy_m2m", NullValueHandling = NullValueHandling.Ignore)]
        public long? BuyM2M { get; set; }

        [JsonProperty("buy_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? BuyPrice { get; set; }

        [JsonProperty("buy_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? BuyQuantity { get; set; }

        [JsonProperty("buy_value", NullValueHandling = NullValueHandling.Ignore)]
        public long? BuyValue { get; set; }

        [JsonProperty("close_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? ClosePrice { get; set; }

        [JsonProperty("day_buy_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? DayBuyPrice { get; set; }

        [JsonProperty("day_buy_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? DayBuyQuantity { get; set; }

        [JsonProperty("day_buy_value", NullValueHandling = NullValueHandling.Ignore)]
        public long? DayBuyValue { get; set; }

        [JsonProperty("day_sell_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? DaySellPrice { get; set; }

        [JsonProperty("day_sell_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? DaySellQuantity { get; set; }

        [JsonProperty("day_sell_value", NullValueHandling = NullValueHandling.Ignore)]
        public long? DaySellValue { get; set; }

        [JsonProperty("exchange", NullValueHandling = NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        [JsonProperty("instrument_token", NullValueHandling = NullValueHandling.Ignore)]
        public long? InstrumentToken { get; set; }

        [JsonProperty("last_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? LastPrice { get; set; }

        [JsonProperty("m2m", NullValueHandling = NullValueHandling.Ignore)]
        public long? M2M { get; set; }

        [JsonProperty("multiplier", NullValueHandling = NullValueHandling.Ignore)]
        public long? Multiplier { get; set; }

        [JsonProperty("overnight_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? OvernightQuantity { get; set; }

        [JsonProperty("pnl", NullValueHandling = NullValueHandling.Ignore)]
        public long? Pnl { get; set; }

        [JsonProperty("product", NullValueHandling = NullValueHandling.Ignore)]
        public string Product { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }

        [JsonProperty("realised", NullValueHandling = NullValueHandling.Ignore)]
        public long? Realised { get; set; }

        [JsonProperty("sell_m2m", NullValueHandling = NullValueHandling.Ignore)]
        public long? SellM2M { get; set; }

        [JsonProperty("sell_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? SellPrice { get; set; }

        [JsonProperty("sell_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? SellQuantity { get; set; }

        [JsonProperty("sell_value", NullValueHandling = NullValueHandling.Ignore)]
        public long? SellValue { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }

        [JsonProperty("unrealised", NullValueHandling = NullValueHandling.Ignore)]
        public long? Unrealised { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public long? Value { get; set; }
    }

    public partial class Positions
    {
        public static Positions FromJson(string json) => JsonConvert.DeserializeObject<Positions>(json, Positions.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Positions self) => JsonConvert.SerializeObject(self, Positions.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
