// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using InstrumentsNse;
//
//    var instrumentsNse = InstrumentsNse.FromJson(jsonString);

namespace InstrumentsNse
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class InstrumentsNse
    {
        [JsonProperty("exchange", NullValueHandling = NullValueHandling.Ignore)]
        public Exchange? Exchange { get; set; }

        [JsonProperty("exchange_token", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExchangeToken { get; set; }

        [JsonProperty("expiry", NullValueHandling = NullValueHandling.Ignore)]
        public string Expiry { get; set; }

        [JsonProperty("instrument_token", NullValueHandling = NullValueHandling.Ignore)]
        public long? InstrumentToken { get; set; }

        [JsonProperty("instrument_type", NullValueHandling = NullValueHandling.Ignore)]
        public InstrumentType? InstrumentType { get; set; }

        [JsonProperty("last_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? LastPrice { get; set; }

        [JsonProperty("lot_size", NullValueHandling = NullValueHandling.Ignore)]
        public long? LotSize { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("segment", NullValueHandling = NullValueHandling.Ignore)]
        public Exchange? Segment { get; set; }

        [JsonProperty("strike", NullValueHandling = NullValueHandling.Ignore)]
        public long? Strike { get; set; }

        [JsonProperty("tick_size", NullValueHandling = NullValueHandling.Ignore)]
        public double? TickSize { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }
    }

    public enum Exchange { Nse };

    public enum InstrumentType { Eq };

    public partial class InstrumentsNse
    {
        public static InstrumentsNse[] FromJson(string json) => JsonConvert.DeserializeObject<InstrumentsNse[]>(json, InstrumentsNse.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this InstrumentsNse[] self) => JsonConvert.SerializeObject(self, InstrumentsNse.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ExchangeConverter.Singleton,
                InstrumentTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ExchangeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Exchange) || t == typeof(Exchange?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "NSE")
            {
                return Exchange.Nse;
            }
            throw new Exception("Cannot unmarshal type Exchange");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Exchange)untypedValue;
            if (value == Exchange.Nse)
            {
                serializer.Serialize(writer, "NSE");
                return;
            }
            throw new Exception("Cannot marshal type Exchange");
        }

        public static readonly ExchangeConverter Singleton = new ExchangeConverter();
    }

    internal class InstrumentTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InstrumentType) || t == typeof(InstrumentType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "EQ")
            {
                return InstrumentType.Eq;
            }
            throw new Exception("Cannot unmarshal type InstrumentType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InstrumentType)untypedValue;
            if (value == InstrumentType.Eq)
            {
                serializer.Serialize(writer, "EQ");
                return;
            }
            throw new Exception("Cannot marshal type InstrumentType");
        }

        public static readonly InstrumentTypeConverter Singleton = new InstrumentTypeConverter();
    }
}
