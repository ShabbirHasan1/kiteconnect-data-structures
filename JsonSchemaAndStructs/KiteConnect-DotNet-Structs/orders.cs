// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Orders;
//
//    var orders = Orders.FromJson(jsonString);

namespace Orders
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Orders
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Datum[] Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("average_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? AveragePrice { get; set; }

        [JsonProperty("cancelled_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? CancelledQuantity { get; set; }

        [JsonProperty("disclosed_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? DisclosedQuantity { get; set; }

        [JsonProperty("exchange", NullValueHandling = NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        [JsonProperty("exchange_order_id")]
        public string ExchangeOrderId { get; set; }

        [JsonProperty("exchange_timestamp")]
        public DateTimeOffset? ExchangeTimestamp { get; set; }

        [JsonProperty("exchange_update_timestamp")]
        public DateTimeOffset? ExchangeUpdateTimestamp { get; set; }

        [JsonProperty("filled_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? FilledQuantity { get; set; }

        [JsonProperty("guid", NullValueHandling = NullValueHandling.Ignore)]
        public string Guid { get; set; }

        [JsonProperty("instrument_token", NullValueHandling = NullValueHandling.Ignore)]
        public long? InstrumentToken { get; set; }

        [JsonProperty("market_protection", NullValueHandling = NullValueHandling.Ignore)]
        public long? MarketProtection { get; set; }

        [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
        public Meta Meta { get; set; }

        [JsonProperty("modified", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Modified { get; set; }

        [JsonProperty("order_id", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        [JsonProperty("order_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OrderTimestamp { get; set; }

        [JsonProperty("order_type", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderType { get; set; }

        [JsonProperty("parent_order_id")]
        public object ParentOrderId { get; set; }

        [JsonProperty("pending_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? PendingQuantity { get; set; }

        [JsonProperty("placed_by", NullValueHandling = NullValueHandling.Ignore)]
        public string PlacedBy { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public long? Price { get; set; }

        [JsonProperty("product", NullValueHandling = NullValueHandling.Ignore)]
        public string Product { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("status_message")]
        public string StatusMessage { get; set; }

        [JsonProperty("status_message_raw")]
        public string StatusMessageRaw { get; set; }

        [JsonProperty("tag")]
        public string Tag { get; set; }

        [JsonProperty("tags", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Tags { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }

        [JsonProperty("transaction_type", NullValueHandling = NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        [JsonProperty("trigger_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? TriggerPrice { get; set; }

        [JsonProperty("validity", NullValueHandling = NullValueHandling.Ignore)]
        public string Validity { get; set; }

        [JsonProperty("validity_ttl", NullValueHandling = NullValueHandling.Ignore)]
        public long? ValidityTtl { get; set; }

        [JsonProperty("variety", NullValueHandling = NullValueHandling.Ignore)]
        public string Variety { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("iceberg", NullValueHandling = NullValueHandling.Ignore)]
        public Iceberg Iceberg { get; set; }
    }

    public partial class Iceberg
    {
        [JsonProperty("leg", NullValueHandling = NullValueHandling.Ignore)]
        public long? Leg { get; set; }

        [JsonProperty("leg_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? LegQuantity { get; set; }

        [JsonProperty("legs", NullValueHandling = NullValueHandling.Ignore)]
        public long? Legs { get; set; }

        [JsonProperty("remaining_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? RemainingQuantity { get; set; }

        [JsonProperty("total_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalQuantity { get; set; }
    }

    public partial class Orders
    {
        public static Orders FromJson(string json) => JsonConvert.DeserializeObject<Orders>(json, Orders.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Orders self) => JsonConvert.SerializeObject(self, Orders.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
