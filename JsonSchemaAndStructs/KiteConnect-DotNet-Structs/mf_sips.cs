// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MfSips;
//
//    var mfSips = MfSips.FromJson(jsonString);

namespace MfSips
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MfSips
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Datum[] Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("completed_instalments", NullValueHandling = NullValueHandling.Ignore)]
        public long? CompletedInstalments { get; set; }

        [JsonProperty("created", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Created { get; set; }

        [JsonProperty("dividend_type", NullValueHandling = NullValueHandling.Ignore)]
        public string DividendType { get; set; }

        [JsonProperty("frequency", NullValueHandling = NullValueHandling.Ignore)]
        public string Frequency { get; set; }

        [JsonProperty("fund", NullValueHandling = NullValueHandling.Ignore)]
        public string Fund { get; set; }

        [JsonProperty("instalment_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? InstalmentAmount { get; set; }

        [JsonProperty("instalment_day", NullValueHandling = NullValueHandling.Ignore)]
        public long? InstalmentDay { get; set; }

        [JsonProperty("instalments", NullValueHandling = NullValueHandling.Ignore)]
        public long? Instalments { get; set; }

        [JsonProperty("last_instalment", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastInstalment { get; set; }

        [JsonProperty("next_instalment", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? NextInstalment { get; set; }

        [JsonProperty("pending_instalments", NullValueHandling = NullValueHandling.Ignore)]
        public long? PendingInstalments { get; set; }

        [JsonProperty("sip_id", NullValueHandling = NullValueHandling.Ignore)]
        public string SipId { get; set; }

        [JsonProperty("sip_reg_num")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? SipRegNum { get; set; }

        [JsonProperty("sip_type", NullValueHandling = NullValueHandling.Ignore)]
        public string SipType { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("step_up", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, long> StepUp { get; set; }

        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }

        [JsonProperty("transaction_type", NullValueHandling = NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        [JsonProperty("trigger_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? TriggerPrice { get; set; }
    }

    public partial class MfSips
    {
        public static MfSips FromJson(string json) => JsonConvert.DeserializeObject<MfSips>(json, MfSips.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MfSips self) => JsonConvert.SerializeObject(self, MfSips.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
