// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Holdings;
//
//    var holdings = Holdings.FromJson(jsonString);

namespace Holdings
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Holdings
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Datum[] Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("authorised_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? AuthorisedDate { get; set; }

        [JsonProperty("authorised_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? AuthorisedQuantity { get; set; }

        [JsonProperty("average_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? AveragePrice { get; set; }

        [JsonProperty("close_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? ClosePrice { get; set; }

        [JsonProperty("collateral_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? CollateralQuantity { get; set; }

        [JsonProperty("collateral_type", NullValueHandling = NullValueHandling.Ignore)]
        public string CollateralType { get; set; }

        [JsonProperty("day_change", NullValueHandling = NullValueHandling.Ignore)]
        public double? DayChange { get; set; }

        [JsonProperty("day_change_percentage", NullValueHandling = NullValueHandling.Ignore)]
        public double? DayChangePercentage { get; set; }

        [JsonProperty("discrepancy", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Discrepancy { get; set; }

        [JsonProperty("exchange", NullValueHandling = NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        [JsonProperty("instrument_token", NullValueHandling = NullValueHandling.Ignore)]
        public long? InstrumentToken { get; set; }

        [JsonProperty("isin", NullValueHandling = NullValueHandling.Ignore)]
        public string Isin { get; set; }

        [JsonProperty("last_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? LastPrice { get; set; }

        [JsonProperty("opening_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? OpeningQuantity { get; set; }

        [JsonProperty("pnl", NullValueHandling = NullValueHandling.Ignore)]
        public double? Pnl { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public long? Price { get; set; }

        [JsonProperty("product", NullValueHandling = NullValueHandling.Ignore)]
        public string Product { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }

        [JsonProperty("realised_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? RealisedQuantity { get; set; }

        [JsonProperty("t1_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? T1Quantity { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }

        [JsonProperty("used_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? UsedQuantity { get; set; }
    }

    public partial class Holdings
    {
        public static Holdings FromJson(string json) => JsonConvert.DeserializeObject<Holdings>(json, Holdings.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Holdings self) => JsonConvert.SerializeObject(self, Holdings.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
