// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MarginCommodity;
//
//    var marginCommodity = MarginCommodity.FromJson(jsonString);

namespace MarginCommodity
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MarginCommodity
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("available", NullValueHandling = NullValueHandling.Ignore)]
        public Available Available { get; set; }

        [JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [JsonProperty("net", NullValueHandling = NullValueHandling.Ignore)]
        public double? Net { get; set; }

        [JsonProperty("utilised", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, double> Utilised { get; set; }
    }

    public partial class Available
    {
        [JsonProperty("adhoc_margin", NullValueHandling = NullValueHandling.Ignore)]
        public long? AdhocMargin { get; set; }

        [JsonProperty("cash", NullValueHandling = NullValueHandling.Ignore)]
        public double? Cash { get; set; }

        [JsonProperty("collateral", NullValueHandling = NullValueHandling.Ignore)]
        public long? Collateral { get; set; }

        [JsonProperty("intraday_payin", NullValueHandling = NullValueHandling.Ignore)]
        public long? IntradayPayin { get; set; }

        [JsonProperty("live_balance", NullValueHandling = NullValueHandling.Ignore)]
        public double? LiveBalance { get; set; }

        [JsonProperty("opening_balance", NullValueHandling = NullValueHandling.Ignore)]
        public double? OpeningBalance { get; set; }
    }

    public partial class MarginCommodity
    {
        public static MarginCommodity FromJson(string json) => JsonConvert.DeserializeObject<MarginCommodity>(json, MarginCommodity.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MarginCommodity self) => JsonConvert.SerializeObject(self, MarginCommodity.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
