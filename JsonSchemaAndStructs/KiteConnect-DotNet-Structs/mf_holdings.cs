// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MfHoldings;
//
//    var mfHoldings = MfHoldings.FromJson(jsonString);

namespace MfHoldings
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MfHoldings
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Datum[] Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("average_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? AveragePrice { get; set; }

        [JsonProperty("folio", NullValueHandling = NullValueHandling.Ignore)]
        public string Folio { get; set; }

        [JsonProperty("fund", NullValueHandling = NullValueHandling.Ignore)]
        public string Fund { get; set; }

        [JsonProperty("last_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? LastPrice { get; set; }

        [JsonProperty("last_price_date", NullValueHandling = NullValueHandling.Ignore)]
        public string LastPriceDate { get; set; }

        [JsonProperty("pledged_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? PledgedQuantity { get; set; }

        [JsonProperty("pnl", NullValueHandling = NullValueHandling.Ignore)]
        public long? Pnl { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Quantity { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }
    }

    public partial class MfHoldings
    {
        public static MfHoldings FromJson(string json) => JsonConvert.DeserializeObject<MfHoldings>(json, MfHoldings.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MfHoldings self) => JsonConvert.SerializeObject(self, MfHoldings.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
