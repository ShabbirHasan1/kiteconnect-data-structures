// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MfOrders;
//
//    var mfOrders = MfOrders.FromJson(jsonString);

namespace MfOrders
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MfOrders
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Datum[] Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? Amount { get; set; }

        [JsonProperty("average_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? AveragePrice { get; set; }

        [JsonProperty("exchange_order_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ExchangeOrderId { get; set; }

        [JsonProperty("exchange_timestamp")]
        public DateTimeOffset? ExchangeTimestamp { get; set; }

        [JsonProperty("folio")]
        public object Folio { get; set; }

        [JsonProperty("fund", NullValueHandling = NullValueHandling.Ignore)]
        public string Fund { get; set; }

        [JsonProperty("last_price", NullValueHandling = NullValueHandling.Ignore)]
        public double? LastPrice { get; set; }

        [JsonProperty("last_price_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LastPriceDate { get; set; }

        [JsonProperty("order_id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? OrderId { get; set; }

        [JsonProperty("order_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OrderTimestamp { get; set; }

        [JsonProperty("placed_by", NullValueHandling = NullValueHandling.Ignore)]
        public string PlacedBy { get; set; }

        [JsonProperty("purchase_type", NullValueHandling = NullValueHandling.Ignore)]
        public string PurchaseType { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }

        [JsonProperty("settlement_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? SettlementId { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("status_message", NullValueHandling = NullValueHandling.Ignore)]
        public string StatusMessage { get; set; }

        [JsonProperty("tag")]
        public string Tag { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }

        [JsonProperty("transaction_type", NullValueHandling = NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        [JsonProperty("variety", NullValueHandling = NullValueHandling.Ignore)]
        public string Variety { get; set; }
    }

    public partial class MfOrders
    {
        public static MfOrders FromJson(string json) => JsonConvert.DeserializeObject<MfOrders>(json, MfOrders.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MfOrders self) => JsonConvert.SerializeObject(self, MfOrders.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
