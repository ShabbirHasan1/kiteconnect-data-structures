// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using OrderInfo;
//
//    var orderInfo = OrderInfo.FromJson(jsonString);

namespace OrderInfo
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OrderInfo
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Datum[] Data { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("average_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? AveragePrice { get; set; }

        [JsonProperty("cancelled_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? CancelledQuantity { get; set; }

        [JsonProperty("disclosed_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? DisclosedQuantity { get; set; }

        [JsonProperty("exchange", NullValueHandling = NullValueHandling.Ignore)]
        public string Exchange { get; set; }

        [JsonProperty("exchange_order_id")]
        public string ExchangeOrderId { get; set; }

        [JsonProperty("exchange_timestamp")]
        public DateTimeOffset? ExchangeTimestamp { get; set; }

        [JsonProperty("filled_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? FilledQuantity { get; set; }

        [JsonProperty("instrument_token", NullValueHandling = NullValueHandling.Ignore)]
        public long? InstrumentToken { get; set; }

        [JsonProperty("order_id", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        [JsonProperty("order_timestamp", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OrderTimestamp { get; set; }

        [JsonProperty("order_type", NullValueHandling = NullValueHandling.Ignore)]
        public string OrderType { get; set; }

        [JsonProperty("parent_order_id")]
        public object ParentOrderId { get; set; }

        [JsonProperty("pending_quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? PendingQuantity { get; set; }

        [JsonProperty("placed_by", NullValueHandling = NullValueHandling.Ignore)]
        public string PlacedBy { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public double? Price { get; set; }

        [JsonProperty("product", NullValueHandling = NullValueHandling.Ignore)]
        public string Product { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("status_message")]
        public object StatusMessage { get; set; }

        [JsonProperty("tag")]
        public object Tag { get; set; }

        [JsonProperty("tradingsymbol", NullValueHandling = NullValueHandling.Ignore)]
        public string Tradingsymbol { get; set; }

        [JsonProperty("transaction_type", NullValueHandling = NullValueHandling.Ignore)]
        public string TransactionType { get; set; }

        [JsonProperty("trigger_price", NullValueHandling = NullValueHandling.Ignore)]
        public long? TriggerPrice { get; set; }

        [JsonProperty("validity", NullValueHandling = NullValueHandling.Ignore)]
        public string Validity { get; set; }

        [JsonProperty("variety", NullValueHandling = NullValueHandling.Ignore)]
        public string Variety { get; set; }
    }

    public partial class OrderInfo
    {
        public static OrderInfo FromJson(string json) => JsonConvert.DeserializeObject<OrderInfo>(json, OrderInfo.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OrderInfo self) => JsonConvert.SerializeObject(self, OrderInfo.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
