// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

typedef array(TriggerRangeElement) TickerLtp;

TickerLtp TickerLtp_from_JSON(mixed json) {
    return map(json, TriggerRangeElement_from_JSON);
}

class TriggerRangeElement {
    int|mixed    instrument_token; // json: "instrument_token"
    int|mixed    last_price;       // json: "last_price"
    mixed|string mode;             // json: "mode"
    bool|mixed   tradable;         // json: "tradable"

    string encode_json() {
        mapping(string:mixed) json = ([
            "instrument_token" : instrument_token,
            "last_price" : last_price,
            "mode" : mode,
            "tradable" : tradable,
        ]);

        return Standards.JSON.encode(json);
    }
}

TriggerRangeElement TriggerRangeElement_from_JSON(mixed json) {
    TriggerRangeElement retval = TriggerRangeElement();

    retval.instrument_token = json["instrument_token"];
    retval.last_price = json["last_price"];
    retval.mode = json["mode"];
    retval.tradable = json["tradable"];

    return retval;
}
