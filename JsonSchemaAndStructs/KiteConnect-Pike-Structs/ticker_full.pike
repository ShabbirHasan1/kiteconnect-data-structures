// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class TickerFull {
    float|mixed  average_price;    // json: "average_price"
    int|mixed    buy_quantity;     // json: "buy_quantity"
    float|mixed  change;           // json: "change"
    Depth|mixed  depth;            // json: "depth"
    int|mixed    instrument_token; // json: "instrument_token"
    float|mixed  last_price;       // json: "last_price"
    int|mixed    last_quantity;    // json: "last_quantity"
    mixed|string last_trade_time;  // json: "last_trade_time"
    mixed|string mode;             // json: "mode"
    Ohlc|mixed   ohlc;             // json: "ohlc"
    int|mixed    oi;               // json: "oi"
    int|mixed    oi_day_high;      // json: "oi_day_high"
    int|mixed    oi_day_low;       // json: "oi_day_low"
    int|mixed    sell_quantity;    // json: "sell_quantity"
    mixed|string timestamp;        // json: "timestamp"
    bool|mixed   tradable;         // json: "tradable"
    int|mixed    volume;           // json: "volume"

    string encode_json() {
        mapping(string:mixed) json = ([
            "average_price" : average_price,
            "buy_quantity" : buy_quantity,
            "change" : change,
            "depth" : depth,
            "instrument_token" : instrument_token,
            "last_price" : last_price,
            "last_quantity" : last_quantity,
            "last_trade_time" : last_trade_time,
            "mode" : mode,
            "ohlc" : ohlc,
            "oi" : oi,
            "oi_day_high" : oi_day_high,
            "oi_day_low" : oi_day_low,
            "sell_quantity" : sell_quantity,
            "timestamp" : timestamp,
            "tradable" : tradable,
            "volume" : volume,
        ]);

        return Standards.JSON.encode(json);
    }
}

TickerFull TickerFull_from_JSON(mixed json) {
    TickerFull retval = TickerFull();

    retval.average_price = json["average_price"];
    retval.buy_quantity = json["buy_quantity"];
    retval.change = json["change"];
    retval.depth = json["depth"];
    retval.instrument_token = json["instrument_token"];
    retval.last_price = json["last_price"];
    retval.last_quantity = json["last_quantity"];
    retval.last_trade_time = json["last_trade_time"];
    retval.mode = json["mode"];
    retval.ohlc = json["ohlc"];
    retval.oi = json["oi"];
    retval.oi_day_high = json["oi_day_high"];
    retval.oi_day_low = json["oi_day_low"];
    retval.sell_quantity = json["sell_quantity"];
    retval.timestamp = json["timestamp"];
    retval.tradable = json["tradable"];
    retval.volume = json["volume"];

    return retval;
}

class Depth {
    array(Buy)|mixed buy;  // json: "buy"
    array(Buy)|mixed sell; // json: "sell"

    string encode_json() {
        mapping(string:mixed) json = ([
            "buy" : buy,
            "sell" : sell,
        ]);

        return Standards.JSON.encode(json);
    }
}

Depth Depth_from_JSON(mixed json) {
    Depth retval = Depth();

    retval.buy = json["buy"];
    retval.sell = json["sell"];

    return retval;
}

class Buy {
    int|mixed   orders;   // json: "orders"
    float|mixed price;    // json: "price"
    int|mixed   quantity; // json: "quantity"

    string encode_json() {
        mapping(string:mixed) json = ([
            "orders" : orders,
            "price" : price,
            "quantity" : quantity,
        ]);

        return Standards.JSON.encode(json);
    }
}

Buy Buy_from_JSON(mixed json) {
    Buy retval = Buy();

    retval.orders = json["orders"];
    retval.price = json["price"];
    retval.quantity = json["quantity"];

    return retval;
}

class Ohlc {
    float|mixed close; // json: "close"
    int|mixed   high;  // json: "high"
    float|mixed low;   // json: "low"
    float|mixed open;  // json: "open"

    string encode_json() {
        mapping(string:mixed) json = ([
            "close" : close,
            "high" : high,
            "low" : low,
            "open" : open,
        ]);

        return Standards.JSON.encode(json);
    }
}

Ohlc Ohlc_from_JSON(mixed json) {
    Ohlc retval = Ohlc();

    retval.close = json["close"];
    retval.high = json["high"];
    retval.low = json["low"];
    retval.open = json["open"];

    return retval;
}
