// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class BasketMargins {
    Data|mixed   data;   // json: "data"
    mixed|string status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

BasketMargins BasketMargins_from_JSON(mixed json) {
    BasketMargins retval = BasketMargins();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Data {
    Final|mixed        data_final; // json: "final"
    Final|mixed        initial;    // json: "initial"
    array(Final)|mixed orders;     // json: "orders"

    string encode_json() {
        mapping(string:mixed) json = ([
            "final" : data_final,
            "initial" : initial,
            "orders" : orders,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.data_final = json["final"];
    retval.initial = json["initial"];
    retval.orders = json["orders"];

    return retval;
}

class Final {
    int|mixed    additional;     // json: "additional"
    int|mixed    bo;             // json: "bo"
    int|mixed    cash;           // json: "cash"
    mixed|string exchange;       // json: "exchange"
    float|mixed  exposure;       // json: "exposure"
    float|mixed  option_premium; // json: "option_premium"
    Pnl|mixed    pnl;            // json: "pnl"
    float|mixed  span;           // json: "span"
    float|mixed  total;          // json: "total"
    mixed|string tradingsymbol;  // json: "tradingsymbol"
    mixed|string type;           // json: "type"
    int|mixed    var;            // json: "var"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additional" : additional,
            "bo" : bo,
            "cash" : cash,
            "exchange" : exchange,
            "exposure" : exposure,
            "option_premium" : option_premium,
            "pnl" : pnl,
            "span" : span,
            "total" : total,
            "tradingsymbol" : tradingsymbol,
            "type" : type,
            "var" : var,
        ]);

        return Standards.JSON.encode(json);
    }
}

Final Final_from_JSON(mixed json) {
    Final retval = Final();

    retval.additional = json["additional"];
    retval.bo = json["bo"];
    retval.cash = json["cash"];
    retval.exchange = json["exchange"];
    retval.exposure = json["exposure"];
    retval.option_premium = json["option_premium"];
    retval.pnl = json["pnl"];
    retval.span = json["span"];
    retval.total = json["total"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.type = json["type"];
    retval.var = json["var"];

    return retval;
}

class Pnl {
    int|mixed realised;   // json: "realised"
    int|mixed unrealised; // json: "unrealised"

    string encode_json() {
        mapping(string:mixed) json = ([
            "realised" : realised,
            "unrealised" : unrealised,
        ]);

        return Standards.JSON.encode(json);
    }
}

Pnl Pnl_from_JSON(mixed json) {
    Pnl retval = Pnl();

    retval.realised = json["realised"];
    retval.unrealised = json["unrealised"];

    return retval;
}
