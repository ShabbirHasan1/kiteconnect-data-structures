// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class Ohlc {
    string      ref;         // json: "$ref"
    string      schema;      // json: "$schema"
    Definitions definitions; // json: "definitions"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
            "$schema" : schema,
            "definitions" : definitions,
        ]);

        return Standards.JSON.encode(json);
    }
}

Ohlc Ohlc_from_JSON(mixed json) {
    Ohlc retval = Ohlc();

    retval.ref = json["$ref"];
    retval.schema = json["$schema"];
    retval.definitions = json["definitions"];

    return retval;
}

class Definitions {
    Data           data;       // json: "Data"
    NseInfyClass   nse_infy;   // json: "NseInfy"
    OhlcClass      ohlc;       // json: "Ohlc"
    OhlcClassClass ohlc_class; // json: "OhlcClass"

    string encode_json() {
        mapping(string:mixed) json = ([
            "Data" : data,
            "NseInfy" : nse_infy,
            "Ohlc" : ohlc,
            "OhlcClass" : ohlc_class,
        ]);

        return Standards.JSON.encode(json);
    }
}

Definitions Definitions_from_JSON(mixed json) {
    Definitions retval = Definitions();

    retval.data = json["Data"];
    retval.nse_infy = json["NseInfy"];
    retval.ohlc = json["Ohlc"];
    retval.ohlc_class = json["OhlcClass"];

    return retval;
}

class Data {
    bool           additional_properties; // json: "additionalProperties"
    DataProperties properties;            // json: "properties"
    array(string)  required;              // json: "required"
    string         title;                 // json: "title"
    string         type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class DataProperties {
    NseInfy nse_infy; // json: "NSE:INFY"

    string encode_json() {
        mapping(string:mixed) json = ([
            "NSE:INFY" : nse_infy,
        ]);

        return Standards.JSON.encode(json);
    }
}

DataProperties DataProperties_from_JSON(mixed json) {
    DataProperties retval = DataProperties();

    retval.nse_infy = json["NSE:INFY"];

    return retval;
}

class NseInfy {
    string ref; // json: "$ref"

    string encode_json() {
        mapping(string:mixed) json = ([
            "$ref" : ref,
        ]);

        return Standards.JSON.encode(json);
    }
}

NseInfy NseInfy_from_JSON(mixed json) {
    NseInfy retval = NseInfy();

    retval.ref = json["$ref"];

    return retval;
}

class NseInfyClass {
    bool              additional_properties; // json: "additionalProperties"
    NseInfyProperties properties;            // json: "properties"
    array(string)     required;              // json: "required"
    string            title;                 // json: "title"
    string            type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

NseInfyClass NseInfyClass_from_JSON(mixed json) {
    NseInfyClass retval = NseInfyClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class NseInfyProperties {
    InstrumentToken instrument_token; // json: "instrument_token"
    InstrumentToken last_price;       // json: "last_price"
    NseInfy         ohlc;             // json: "ohlc"

    string encode_json() {
        mapping(string:mixed) json = ([
            "instrument_token" : instrument_token,
            "last_price" : last_price,
            "ohlc" : ohlc,
        ]);

        return Standards.JSON.encode(json);
    }
}

NseInfyProperties NseInfyProperties_from_JSON(mixed json) {
    NseInfyProperties retval = NseInfyProperties();

    retval.instrument_token = json["instrument_token"];
    retval.last_price = json["last_price"];
    retval.ohlc = json["ohlc"];

    return retval;
}

class InstrumentToken {
    string type; // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

InstrumentToken InstrumentToken_from_JSON(mixed json) {
    InstrumentToken retval = InstrumentToken();

    retval.type = json["type"];

    return retval;
}

class OhlcClass {
    bool           additional_properties; // json: "additionalProperties"
    OhlcProperties properties;            // json: "properties"
    array(string)  required;              // json: "required"
    string         title;                 // json: "title"
    string         type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

OhlcClass OhlcClass_from_JSON(mixed json) {
    OhlcClass retval = OhlcClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class OhlcProperties {
    NseInfy         data;   // json: "data"
    InstrumentToken status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

OhlcProperties OhlcProperties_from_JSON(mixed json) {
    OhlcProperties retval = OhlcProperties();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class OhlcClassClass {
    bool                additional_properties; // json: "additionalProperties"
    OhlcClassProperties properties;            // json: "properties"
    array(string)       required;              // json: "required"
    string              title;                 // json: "title"
    string              type;                  // json: "type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "additionalProperties" : additional_properties,
            "properties" : properties,
            "required" : required,
            "title" : title,
            "type" : type,
        ]);

        return Standards.JSON.encode(json);
    }
}

OhlcClassClass OhlcClassClass_from_JSON(mixed json) {
    OhlcClassClass retval = OhlcClassClass();

    retval.additional_properties = json["additionalProperties"];
    retval.properties = json["properties"];
    retval.required = json["required"];
    retval.title = json["title"];
    retval.type = json["type"];

    return retval;
}

class OhlcClassProperties {
    InstrumentToken close; // json: "close"
    InstrumentToken high;  // json: "high"
    InstrumentToken low;   // json: "low"
    InstrumentToken open;  // json: "open"

    string encode_json() {
        mapping(string:mixed) json = ([
            "close" : close,
            "high" : high,
            "low" : low,
            "open" : open,
        ]);

        return Standards.JSON.encode(json);
    }
}

OhlcClassProperties OhlcClassProperties_from_JSON(mixed json) {
    OhlcClassProperties retval = OhlcClassProperties();

    retval.close = json["close"];
    retval.high = json["high"];
    retval.low = json["low"];
    retval.open = json["open"];

    return retval;
}
