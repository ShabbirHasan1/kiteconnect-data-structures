// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class HoldingsAuth {
    Data|mixed   data;   // json: "data"
    mixed|string status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

HoldingsAuth HoldingsAuth_from_JSON(mixed json) {
    HoldingsAuth retval = HoldingsAuth();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Data {
    mixed|string request_id; // json: "request_id"

    string encode_json() {
        mapping(string:mixed) json = ([
            "request_id" : request_id,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.request_id = json["request_id"];

    return retval;
}
