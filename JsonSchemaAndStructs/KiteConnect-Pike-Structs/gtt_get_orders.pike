// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class GttGetOrders {
    array(Datum)|mixed data;   // json: "data"
    mixed|string       status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

GttGetOrders GttGetOrders_from_JSON(mixed json) {
    GttGetOrders retval = GttGetOrders();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Datum {
    Condition|mixed    condition;      // json: "condition"
    mixed|string       created_at;     // json: "created_at"
    mixed|string       expires_at;     // json: "expires_at"
    int|mixed          id;             // json: "id"
    Meta|mixed         meta;           // json: "meta"
    array(Order)|mixed orders;         // json: "orders"
    mixed              parent_trigger; // json: "parent_trigger"
    mixed|string       status;         // json: "status"
    mixed|string       type;           // json: "type"
    mixed|string       updated_at;     // json: "updated_at"
    mixed|string       user_id;        // json: "user_id"

    string encode_json() {
        mapping(string:mixed) json = ([
            "condition" : condition,
            "created_at" : created_at,
            "expires_at" : expires_at,
            "id" : id,
            "meta" : meta,
            "orders" : orders,
            "parent_trigger" : parent_trigger,
            "status" : status,
            "type" : type,
            "updated_at" : updated_at,
            "user_id" : user_id,
        ]);

        return Standards.JSON.encode(json);
    }
}

Datum Datum_from_JSON(mixed json) {
    Datum retval = Datum();

    retval.condition = json["condition"];
    retval.created_at = json["created_at"];
    retval.expires_at = json["expires_at"];
    retval.id = json["id"];
    retval.meta = json["meta"];
    retval.orders = json["orders"];
    retval.parent_trigger = json["parent_trigger"];
    retval.status = json["status"];
    retval.type = json["type"];
    retval.updated_at = json["updated_at"];
    retval.user_id = json["user_id"];

    return retval;
}

class Condition {
    mixed|string       exchange;         // json: "exchange"
    int|mixed          instrument_token; // json: "instrument_token"
    float|mixed        last_price;       // json: "last_price"
    mixed|string       tradingsymbol;    // json: "tradingsymbol"
    array(float)|mixed trigger_values;   // json: "trigger_values"

    string encode_json() {
        mapping(string:mixed) json = ([
            "exchange" : exchange,
            "instrument_token" : instrument_token,
            "last_price" : last_price,
            "tradingsymbol" : tradingsymbol,
            "trigger_values" : trigger_values,
        ]);

        return Standards.JSON.encode(json);
    }
}

Condition Condition_from_JSON(mixed json) {
    Condition retval = Condition();

    retval.exchange = json["exchange"];
    retval.instrument_token = json["instrument_token"];
    retval.last_price = json["last_price"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.trigger_values = json["trigger_values"];

    return retval;
}

class Meta {

    string encode_json() {
        mapping(string:mixed) json = ([
        ]);

        return Standards.JSON.encode(json);
    }
}

Meta Meta_from_JSON(mixed json) {
    Meta retval = Meta();

    return retval;
}

class Order {
    mixed|string exchange;         // json: "exchange"
    mixed|string order_type;       // json: "order_type"
    float|mixed  price;            // json: "price"
    mixed|string product;          // json: "product"
    int|mixed    quantity;         // json: "quantity"
    Result|mixed result;           // json: "result"
    mixed|string tradingsymbol;    // json: "tradingsymbol"
    mixed|string transaction_type; // json: "transaction_type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "exchange" : exchange,
            "order_type" : order_type,
            "price" : price,
            "product" : product,
            "quantity" : quantity,
            "result" : result,
            "tradingsymbol" : tradingsymbol,
            "transaction_type" : transaction_type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Order Order_from_JSON(mixed json) {
    Order retval = Order();

    retval.exchange = json["exchange"];
    retval.order_type = json["order_type"];
    retval.price = json["price"];
    retval.product = json["product"];
    retval.quantity = json["quantity"];
    retval.result = json["result"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.transaction_type = json["transaction_type"];

    return retval;
}

class Result {
    mixed|string      account_id;       // json: "account_id"
    mixed|string      exchange;         // json: "exchange"
    mixed|string      meta;             // json: "meta"
    OrderResult|mixed order_result;     // json: "order_result"
    mixed|string      order_type;       // json: "order_type"
    int|mixed         price;            // json: "price"
    mixed|string      product;          // json: "product"
    int|mixed         quantity;         // json: "quantity"
    mixed|string      timestamp;        // json: "timestamp"
    mixed|string      tradingsymbol;    // json: "tradingsymbol"
    mixed|string      transaction_type; // json: "transaction_type"
    float|mixed       triggered_at;     // json: "triggered_at"
    mixed|string      validity;         // json: "validity"

    string encode_json() {
        mapping(string:mixed) json = ([
            "account_id" : account_id,
            "exchange" : exchange,
            "meta" : meta,
            "order_result" : order_result,
            "order_type" : order_type,
            "price" : price,
            "product" : product,
            "quantity" : quantity,
            "timestamp" : timestamp,
            "tradingsymbol" : tradingsymbol,
            "transaction_type" : transaction_type,
            "triggered_at" : triggered_at,
            "validity" : validity,
        ]);

        return Standards.JSON.encode(json);
    }
}

Result Result_from_JSON(mixed json) {
    Result retval = Result();

    retval.account_id = json["account_id"];
    retval.exchange = json["exchange"];
    retval.meta = json["meta"];
    retval.order_result = json["order_result"];
    retval.order_type = json["order_type"];
    retval.price = json["price"];
    retval.product = json["product"];
    retval.quantity = json["quantity"];
    retval.timestamp = json["timestamp"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.transaction_type = json["transaction_type"];
    retval.triggered_at = json["triggered_at"];
    retval.validity = json["validity"];

    return retval;
}

class OrderResult {
    mixed|string order_id;         // json: "order_id"
    mixed|string rejection_reason; // json: "rejection_reason"
    mixed|string status;           // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "order_id" : order_id,
            "rejection_reason" : rejection_reason,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

OrderResult OrderResult_from_JSON(mixed json) {
    OrderResult retval = OrderResult();

    retval.order_id = json["order_id"];
    retval.rejection_reason = json["rejection_reason"];
    retval.status = json["status"];

    return retval;
}
