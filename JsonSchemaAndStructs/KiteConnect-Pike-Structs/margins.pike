// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class Margins {
    Data|mixed   data;   // json: "data"
    mixed|string status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

Margins Margins_from_JSON(mixed json) {
    Margins retval = Margins();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Data {
    Ity|mixed commodity; // json: "commodity"
    Ity|mixed equity;    // json: "equity"

    string encode_json() {
        mapping(string:mixed) json = ([
            "commodity" : commodity,
            "equity" : equity,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.commodity = json["commodity"];
    retval.equity = json["equity"];

    return retval;
}

class Ity {
    Available|mixed             available; // json: "available"
    bool|mixed                  enabled;   // json: "enabled"
    float|mixed                 net;       // json: "net"
    mapping(string:float)|mixed utilised;  // json: "utilised"

    string encode_json() {
        mapping(string:mixed) json = ([
            "available" : available,
            "enabled" : enabled,
            "net" : net,
            "utilised" : utilised,
        ]);

        return Standards.JSON.encode(json);
    }
}

Ity Ity_from_JSON(mixed json) {
    Ity retval = Ity();

    retval.available = json["available"];
    retval.enabled = json["enabled"];
    retval.net = json["net"];
    retval.utilised = json["utilised"];

    return retval;
}

class Available {
    int|mixed   adhoc_margin;    // json: "adhoc_margin"
    float|mixed cash;            // json: "cash"
    int|mixed   collateral;      // json: "collateral"
    int|mixed   intraday_payin;  // json: "intraday_payin"
    float|mixed live_balance;    // json: "live_balance"
    float|mixed opening_balance; // json: "opening_balance"

    string encode_json() {
        mapping(string:mixed) json = ([
            "adhoc_margin" : adhoc_margin,
            "cash" : cash,
            "collateral" : collateral,
            "intraday_payin" : intraday_payin,
            "live_balance" : live_balance,
            "opening_balance" : opening_balance,
        ]);

        return Standards.JSON.encode(json);
    }
}

Available Available_from_JSON(mixed json) {
    Available retval = Available();

    retval.adhoc_margin = json["adhoc_margin"];
    retval.cash = json["cash"];
    retval.collateral = json["collateral"];
    retval.intraday_payin = json["intraday_payin"];
    retval.live_balance = json["live_balance"];
    retval.opening_balance = json["opening_balance"];

    return retval;
}
