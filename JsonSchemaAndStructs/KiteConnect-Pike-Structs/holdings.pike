// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class Holdings {
    array(Datum)|mixed data;   // json: "data"
    mixed|string       status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

Holdings Holdings_from_JSON(mixed json) {
    Holdings retval = Holdings();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Datum {
    mixed|string authorised_date;       // json: "authorised_date"
    int|mixed    authorised_quantity;   // json: "authorised_quantity"
    float|mixed  average_price;         // json: "average_price"
    float|mixed  close_price;           // json: "close_price"
    int|mixed    collateral_quantity;   // json: "collateral_quantity"
    mixed|string collateral_type;       // json: "collateral_type"
    float|mixed  day_change;            // json: "day_change"
    float|mixed  day_change_percentage; // json: "day_change_percentage"
    bool|mixed   discrepancy;           // json: "discrepancy"
    mixed|string exchange;              // json: "exchange"
    int|mixed    instrument_token;      // json: "instrument_token"
    mixed|string isin;                  // json: "isin"
    float|mixed  last_price;            // json: "last_price"
    int|mixed    opening_quantity;      // json: "opening_quantity"
    float|mixed  pnl;                   // json: "pnl"
    int|mixed    price;                 // json: "price"
    mixed|string product;               // json: "product"
    int|mixed    quantity;              // json: "quantity"
    int|mixed    realised_quantity;     // json: "realised_quantity"
    int|mixed    t1_quantity;           // json: "t1_quantity"
    mixed|string tradingsymbol;         // json: "tradingsymbol"
    int|mixed    used_quantity;         // json: "used_quantity"

    string encode_json() {
        mapping(string:mixed) json = ([
            "authorised_date" : authorised_date,
            "authorised_quantity" : authorised_quantity,
            "average_price" : average_price,
            "close_price" : close_price,
            "collateral_quantity" : collateral_quantity,
            "collateral_type" : collateral_type,
            "day_change" : day_change,
            "day_change_percentage" : day_change_percentage,
            "discrepancy" : discrepancy,
            "exchange" : exchange,
            "instrument_token" : instrument_token,
            "isin" : isin,
            "last_price" : last_price,
            "opening_quantity" : opening_quantity,
            "pnl" : pnl,
            "price" : price,
            "product" : product,
            "quantity" : quantity,
            "realised_quantity" : realised_quantity,
            "t1_quantity" : t1_quantity,
            "tradingsymbol" : tradingsymbol,
            "used_quantity" : used_quantity,
        ]);

        return Standards.JSON.encode(json);
    }
}

Datum Datum_from_JSON(mixed json) {
    Datum retval = Datum();

    retval.authorised_date = json["authorised_date"];
    retval.authorised_quantity = json["authorised_quantity"];
    retval.average_price = json["average_price"];
    retval.close_price = json["close_price"];
    retval.collateral_quantity = json["collateral_quantity"];
    retval.collateral_type = json["collateral_type"];
    retval.day_change = json["day_change"];
    retval.day_change_percentage = json["day_change_percentage"];
    retval.discrepancy = json["discrepancy"];
    retval.exchange = json["exchange"];
    retval.instrument_token = json["instrument_token"];
    retval.isin = json["isin"];
    retval.last_price = json["last_price"];
    retval.opening_quantity = json["opening_quantity"];
    retval.pnl = json["pnl"];
    retval.price = json["price"];
    retval.product = json["product"];
    retval.quantity = json["quantity"];
    retval.realised_quantity = json["realised_quantity"];
    retval.t1_quantity = json["t1_quantity"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.used_quantity = json["used_quantity"];

    return retval;
}
