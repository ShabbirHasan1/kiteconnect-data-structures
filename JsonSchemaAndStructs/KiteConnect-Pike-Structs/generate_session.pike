// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class GenerateSession {
    Data|mixed   data;   // json: "data"
    mixed|string status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

GenerateSession GenerateSession_from_JSON(mixed json) {
    GenerateSession retval = GenerateSession();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Data {
    mixed|string        access_token;   // json: "access_token"
    mixed|string        api_key;        // json: "api_key"
    mixed|string        avatar_url;     // json: "avatar_url"
    mixed|string        broker;         // json: "broker"
    mixed|string        email;          // json: "email"
    mixed|string        enctoken;       // json: "enctoken"
    array(string)|mixed exchanges;      // json: "exchanges"
    mixed|string        login_time;     // json: "login_time"
    Meta|mixed          meta;           // json: "meta"
    array(string)|mixed order_types;    // json: "order_types"
    array(string)|mixed products;       // json: "products"
    mixed|string        public_token;   // json: "public_token"
    mixed|string        refresh_token;  // json: "refresh_token"
    mixed|string        silo;           // json: "silo"
    mixed|string        user_id;        // json: "user_id"
    mixed|string        user_name;      // json: "user_name"
    mixed|string        user_shortname; // json: "user_shortname"
    mixed|string        user_type;      // json: "user_type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "access_token" : access_token,
            "api_key" : api_key,
            "avatar_url" : avatar_url,
            "broker" : broker,
            "email" : email,
            "enctoken" : enctoken,
            "exchanges" : exchanges,
            "login_time" : login_time,
            "meta" : meta,
            "order_types" : order_types,
            "products" : products,
            "public_token" : public_token,
            "refresh_token" : refresh_token,
            "silo" : silo,
            "user_id" : user_id,
            "user_name" : user_name,
            "user_shortname" : user_shortname,
            "user_type" : user_type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Data Data_from_JSON(mixed json) {
    Data retval = Data();

    retval.access_token = json["access_token"];
    retval.api_key = json["api_key"];
    retval.avatar_url = json["avatar_url"];
    retval.broker = json["broker"];
    retval.email = json["email"];
    retval.enctoken = json["enctoken"];
    retval.exchanges = json["exchanges"];
    retval.login_time = json["login_time"];
    retval.meta = json["meta"];
    retval.order_types = json["order_types"];
    retval.products = json["products"];
    retval.public_token = json["public_token"];
    retval.refresh_token = json["refresh_token"];
    retval.silo = json["silo"];
    retval.user_id = json["user_id"];
    retval.user_name = json["user_name"];
    retval.user_shortname = json["user_shortname"];
    retval.user_type = json["user_type"];

    return retval;
}

class Meta {
    mixed|string demat_consent; // json: "demat_consent"

    string encode_json() {
        mapping(string:mixed) json = ([
            "demat_consent" : demat_consent,
        ]);

        return Standards.JSON.encode(json);
    }
}

Meta Meta_from_JSON(mixed json) {
    Meta retval = Meta();

    retval.demat_consent = json["demat_consent"];

    return retval;
}
