// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

typedef array(MfInstrument) MfInstruments;

MfInstruments MfInstruments_from_JSON(mixed json) {
    return map(json, MfInstrument_from_JSON);
}

class MfInstrument {
    Amc|mixed            amc;                                // json: "amc"
    DividendType|mixed   dividend_type;                      // json: "dividend_type"
    float|mixed          last_price;                         // json: "last_price"
    mixed|string         last_price_date;                    // json: "last_price_date"
    int|mixed            minimum_additional_purchase_amount; // json: "minimum_additional_purchase_amount"
    int|mixed            minimum_purchase_amount;            // json: "minimum_purchase_amount"
    float|mixed          minimum_redemption_quantity;        // json: "minimum_redemption_quantity"
    mixed|string         name;                               // json: "name"
    Plan|mixed           plan;                               // json: "plan"
    int|mixed            purchase_allowed;                   // json: "purchase_allowed"
    int|mixed            purchase_amount_multiplier;         // json: "purchase_amount_multiplier"
    int|mixed            redemption_allowed;                 // json: "redemption_allowed"
    float|mixed          redemption_quantity_multiplier;     // json: "redemption_quantity_multiplier"
    SchemeType|mixed     scheme_type;                        // json: "scheme_type"
    SettlementType|mixed settlement_type;                    // json: "settlement_type"
    mixed|string         tradingsymbol;                      // json: "tradingsymbol"

    string encode_json() {
        mapping(string:mixed) json = ([
            "amc" : amc,
            "dividend_type" : dividend_type,
            "last_price" : last_price,
            "last_price_date" : last_price_date,
            "minimum_additional_purchase_amount" : minimum_additional_purchase_amount,
            "minimum_purchase_amount" : minimum_purchase_amount,
            "minimum_redemption_quantity" : minimum_redemption_quantity,
            "name" : name,
            "plan" : plan,
            "purchase_allowed" : purchase_allowed,
            "purchase_amount_multiplier" : purchase_amount_multiplier,
            "redemption_allowed" : redemption_allowed,
            "redemption_quantity_multiplier" : redemption_quantity_multiplier,
            "scheme_type" : scheme_type,
            "settlement_type" : settlement_type,
            "tradingsymbol" : tradingsymbol,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfInstrument MfInstrument_from_JSON(mixed json) {
    MfInstrument retval = MfInstrument();

    retval.amc = json["amc"];
    retval.dividend_type = json["dividend_type"];
    retval.last_price = json["last_price"];
    retval.last_price_date = json["last_price_date"];
    retval.minimum_additional_purchase_amount = json["minimum_additional_purchase_amount"];
    retval.minimum_purchase_amount = json["minimum_purchase_amount"];
    retval.minimum_redemption_quantity = json["minimum_redemption_quantity"];
    retval.name = json["name"];
    retval.plan = json["plan"];
    retval.purchase_allowed = json["purchase_allowed"];
    retval.purchase_amount_multiplier = json["purchase_amount_multiplier"];
    retval.redemption_allowed = json["redemption_allowed"];
    retval.redemption_quantity_multiplier = json["redemption_quantity_multiplier"];
    retval.scheme_type = json["scheme_type"];
    retval.settlement_type = json["settlement_type"];
    retval.tradingsymbol = json["tradingsymbol"];

    return retval;
}

enum Amc {
    BIRLA_SUN_LIFE_MUTUAL_FUND_MF = "BirlaSunLifeMutualFund_MF", // json: "BirlaSunLifeMutualFund_MF"
}

enum DividendType {
    GROWTH = "growth", // json: "growth"
    PAYOUT = "payout", // json: "payout"
}

enum Plan {
    DIRECT = "direct",   // json: "direct"
    REGULAR = "regular", // json: "regular"
}

enum SchemeType {
    BALANCED = "balanced", // json: "balanced"
    DEBT = "debt",         // json: "debt"
    EQUITY = "equity",     // json: "equity"
    FOF = "fof",           // json: "fof"
    LIQUID = "liquid",     // json: "liquid"
}

enum SettlementType {
    T1 = "T1", // json: "T1"
    T3 = "T3", // json: "T3"
    T4 = "T4", // json: "T4"
    T6 = "T6", // json: "T6"
}
