// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class Trades {
    array(Datum)|mixed data;   // json: "data"
    mixed|string       status; // json: "status"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
            "status" : status,
        ]);

        return Standards.JSON.encode(json);
    }
}

Trades Trades_from_JSON(mixed json) {
    Trades retval = Trades();

    retval.data = json["data"];
    retval.status = json["status"];

    return retval;
}

class Datum {
    float|mixed  average_price;      // json: "average_price"
    mixed|string exchange;           // json: "exchange"
    mixed|string exchange_order_id;  // json: "exchange_order_id"
    mixed|string exchange_timestamp; // json: "exchange_timestamp"
    mixed|string fill_timestamp;     // json: "fill_timestamp"
    int|mixed    instrument_token;   // json: "instrument_token"
    mixed|string order_id;           // json: "order_id"
    mixed|string order_timestamp;    // json: "order_timestamp"
    mixed|string product;            // json: "product"
    int|mixed    quantity;           // json: "quantity"
    mixed|string trade_id;           // json: "trade_id"
    mixed|string tradingsymbol;      // json: "tradingsymbol"
    mixed|string transaction_type;   // json: "transaction_type"

    string encode_json() {
        mapping(string:mixed) json = ([
            "average_price" : average_price,
            "exchange" : exchange,
            "exchange_order_id" : exchange_order_id,
            "exchange_timestamp" : exchange_timestamp,
            "fill_timestamp" : fill_timestamp,
            "instrument_token" : instrument_token,
            "order_id" : order_id,
            "order_timestamp" : order_timestamp,
            "product" : product,
            "quantity" : quantity,
            "trade_id" : trade_id,
            "tradingsymbol" : tradingsymbol,
            "transaction_type" : transaction_type,
        ]);

        return Standards.JSON.encode(json);
    }
}

Datum Datum_from_JSON(mixed json) {
    Datum retval = Datum();

    retval.average_price = json["average_price"];
    retval.exchange = json["exchange"];
    retval.exchange_order_id = json["exchange_order_id"];
    retval.exchange_timestamp = json["exchange_timestamp"];
    retval.fill_timestamp = json["fill_timestamp"];
    retval.instrument_token = json["instrument_token"];
    retval.order_id = json["order_id"];
    retval.order_timestamp = json["order_timestamp"];
    retval.product = json["product"];
    retval.quantity = json["quantity"];
    retval.trade_id = json["trade_id"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.transaction_type = json["transaction_type"];

    return retval;
}
