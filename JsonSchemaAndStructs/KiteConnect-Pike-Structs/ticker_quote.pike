// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class TickerQuote {
    float|mixed  average_price;    // json: "average_price"
    int|mixed    buy_quantity;     // json: "buy_quantity"
    float|mixed  change;           // json: "change"
    int|mixed    instrument_token; // json: "instrument_token"
    float|mixed  last_price;       // json: "last_price"
    int|mixed    last_quantity;    // json: "last_quantity"
    mixed|string mode;             // json: "mode"
    Ohlc|mixed   ohlc;             // json: "ohlc"
    int|mixed    sell_quantity;    // json: "sell_quantity"
    bool|mixed   tradable;         // json: "tradable"
    int|mixed    volume;           // json: "volume"

    string encode_json() {
        mapping(string:mixed) json = ([
            "average_price" : average_price,
            "buy_quantity" : buy_quantity,
            "change" : change,
            "instrument_token" : instrument_token,
            "last_price" : last_price,
            "last_quantity" : last_quantity,
            "mode" : mode,
            "ohlc" : ohlc,
            "sell_quantity" : sell_quantity,
            "tradable" : tradable,
            "volume" : volume,
        ]);

        return Standards.JSON.encode(json);
    }
}

TickerQuote TickerQuote_from_JSON(mixed json) {
    TickerQuote retval = TickerQuote();

    retval.average_price = json["average_price"];
    retval.buy_quantity = json["buy_quantity"];
    retval.change = json["change"];
    retval.instrument_token = json["instrument_token"];
    retval.last_price = json["last_price"];
    retval.last_quantity = json["last_quantity"];
    retval.mode = json["mode"];
    retval.ohlc = json["ohlc"];
    retval.sell_quantity = json["sell_quantity"];
    retval.tradable = json["tradable"];
    retval.volume = json["volume"];

    return retval;
}

class Ohlc {
    float|mixed close; // json: "close"
    int|mixed   high;  // json: "high"
    float|mixed low;   // json: "low"
    float|mixed open;  // json: "open"

    string encode_json() {
        mapping(string:mixed) json = ([
            "close" : close,
            "high" : high,
            "low" : low,
            "open" : open,
        ]);

        return Standards.JSON.encode(json);
    }
}

Ohlc Ohlc_from_JSON(mixed json) {
    Ohlc retval = Ohlc();

    retval.close = json["close"];
    retval.high = json["high"];
    retval.low = json["low"];
    retval.open = json["open"];

    return retval;
}
