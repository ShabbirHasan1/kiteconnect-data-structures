// This source has been automatically generated by quicktype.
// ( https://github.com/quicktype/quicktype )
//
// To use this code, simply import it into your project as a Pike module.
// To JSON-encode your object, you can pass it to `Standards.JSON.encode`
// or call `encode_json` on it.
//
// To decode a JSON string, first pass it to `Standards.JSON.decode`,
// and then pass the result to `<YourClass>_from_JSON`.
// It will return an instance of <YourClass>.
// Bear in mind that these functions have unexpected behavior,
// and will likely throw an error, if the JSON string does not
// match the expected interface, even if the JSON itself is valid.

class MfSips {
    array(Datum)|mixed data; // json: "data"

    string encode_json() {
        mapping(string:mixed) json = ([
            "data" : data,
        ]);

        return Standards.JSON.encode(json);
    }
}

MfSips MfSips_from_JSON(mixed json) {
    MfSips retval = MfSips();

    retval.data = json["data"];

    return retval;
}

class Datum {
    int|mixed                 completed_instalments; // json: "completed_instalments"
    mixed|string              created;               // json: "created"
    mixed|string              dividend_type;         // json: "dividend_type"
    mixed|string              frequency;             // json: "frequency"
    mixed|string              fund;                  // json: "fund"
    int|mixed                 instalment_amount;     // json: "instalment_amount"
    int|mixed                 instalment_day;        // json: "instalment_day"
    int|mixed                 instalments;           // json: "instalments"
    mixed|string              last_instalment;       // json: "last_instalment"
    mixed|string              next_instalment;       // json: "next_instalment"
    int|mixed                 pending_instalments;   // json: "pending_instalments"
    mixed|string              sip_id;                // json: "sip_id"
    mixed|string              sip_reg_num;           // json: "sip_reg_num"
    mixed|string              sip_type;              // json: "sip_type"
    mixed|string              status;                // json: "status"
    mapping(string:int)|mixed step_up;               // json: "step_up"
    mixed|string              tag;                   // json: "tag"
    mixed|string              tradingsymbol;         // json: "tradingsymbol"
    mixed|string              transaction_type;      // json: "transaction_type"
    int|mixed                 trigger_price;         // json: "trigger_price"

    string encode_json() {
        mapping(string:mixed) json = ([
            "completed_instalments" : completed_instalments,
            "created" : created,
            "dividend_type" : dividend_type,
            "frequency" : frequency,
            "fund" : fund,
            "instalment_amount" : instalment_amount,
            "instalment_day" : instalment_day,
            "instalments" : instalments,
            "last_instalment" : last_instalment,
            "next_instalment" : next_instalment,
            "pending_instalments" : pending_instalments,
            "sip_id" : sip_id,
            "sip_reg_num" : sip_reg_num,
            "sip_type" : sip_type,
            "status" : status,
            "step_up" : step_up,
            "tag" : tag,
            "tradingsymbol" : tradingsymbol,
            "transaction_type" : transaction_type,
            "trigger_price" : trigger_price,
        ]);

        return Standards.JSON.encode(json);
    }
}

Datum Datum_from_JSON(mixed json) {
    Datum retval = Datum();

    retval.completed_instalments = json["completed_instalments"];
    retval.created = json["created"];
    retval.dividend_type = json["dividend_type"];
    retval.frequency = json["frequency"];
    retval.fund = json["fund"];
    retval.instalment_amount = json["instalment_amount"];
    retval.instalment_day = json["instalment_day"];
    retval.instalments = json["instalments"];
    retval.last_instalment = json["last_instalment"];
    retval.next_instalment = json["next_instalment"];
    retval.pending_instalments = json["pending_instalments"];
    retval.sip_id = json["sip_id"];
    retval.sip_reg_num = json["sip_reg_num"];
    retval.sip_type = json["sip_type"];
    retval.status = json["status"];
    retval.step_up = json["step_up"];
    retval.tag = json["tag"];
    retval.tradingsymbol = json["tradingsymbol"];
    retval.transaction_type = json["transaction_type"];
    retval.trigger_price = json["trigger_price"];

    return retval;
}
